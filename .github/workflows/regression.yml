name: Regression Tests

on:
  push:
    branches: [main, realtime-model-list-improvements]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Label check job to ensure PRs touching guarded files have area labels
  label-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check for area labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels;
            const hasAreaLabel = labels.some(label => 
              label.name.startsWith('area:') || 
              label.name.startsWith('phase:')
            );
            
            if (!hasAreaLabel) {
              core.setFailed('Pull request must have an area: or phase: label for guarded file changes');
            }
            console.log('Label check passed:', hasAreaLabel);

  # Root-level tests
  test-root:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run schema contract tests
        run: npx vitest run tests/contracts.messages.schema.test.js

      - name: Run smoke test
        run: bash scripts/smoke.sh

  # Extension tests
  test-extension:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: extensions/claude-throne
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: extensions/claude-throne/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Compile TypeScript
        run: npm run compile

      - name: Run unit tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level high
        continue-on-error: true

  # Check for binary artifacts (VSIX files, large binaries)
  check-binaries:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for VSIX files
        run: |
          if git diff --name-only origin/"${{ github.base_ref }}"...HEAD | grep -q '\.vsix$'; then
            echo "❌ Error: VSIX files detected in diff. These should not be committed."
            echo "Please remove .vsix files from the commit."
            git diff --name-only origin/"${{ github.base_ref }}"...HEAD | grep '\.vsix$'
            exit 1
          fi

      - name: Check for large binary files (>1MB)
        run: |
          large_files=$(git diff --name-only origin/"${{ github.base_ref }}"...HEAD | xargs -I {} find {} -type f -size +1M 2>/dev/null || true)
          if [ -n "$large_files" ]; then
            echo "❌ Error: Large binary files detected (>1MB). These should not be committed."
            echo "$large_files"
            exit 1
          fi

  # Type checking
  typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install extension dependencies
        run: |
          cd extensions/claude-throne
          npm ci

      - name: Type check root
        run: npx tsc --noEmit

      - name: Type check extension
        run: |
          cd extensions/claude-throne
          npx tsc --noEmit
