{
  "name": "claude-throne",
  "displayName": "Thronekeeper",
  "publisher": "thehive",
  "description": "Configure and run Thronekeeper proxy with secure credential storage and model routing.",
  "version": "1.5.50",
  "icon": "images/thronekeeper-logo.jpg",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/KHAEntertainment/thronekeeper"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "extensionKind": [
    "ui",
    "workspace"
  ],
  "categories": [
    "Other"
  ],
  "main": "./out/extension.js",
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "claudeThrone",
          "title": "Thronekeeper",
          "icon": "images/thronekeeper-logo.jpg"
        }
      ]
    },
    "views": {
      "claudeThrone": [
        {
          "id": "claudeThrone.activity",
          "name": "Thronekeeper",
          "type": "webview"
        }
      ]
    },
    "commands": [
      {
        "command": "claudeThrone.openPanel",
        "title": "Thronekeeper: Open Panel"
      },
      {
        "command": "claudeThrone.storeOpenRouterKey",
        "title": "Thronekeeper: Store OpenRouter API Key"
      },
      {
        "command": "claudeThrone.storeOpenAIKey",
        "title": "Thronekeeper: Store OpenAI API Key"
      },
      {
        "command": "claudeThrone.storeTogetherKey",
        "title": "Thronekeeper: Store Together API Key"
      },
      {
        "command": "claudeThrone.storeDeepseekKey",
        "title": "Claude Throne: Store Deepseek API Key"
      },
      {
        "command": "claudeThrone.storeGlmKey",
        "title": "Claude Throne: Store GLM API Key"
      },
      {
        "command": "claudeThrone.storeCustomKey",
        "title": "Thronekeeper: Store Custom Provider API Key"
      },
      {
        "command": "claudeThrone.storeAnyKey",
        "title": "Thronekeeper: Store Provider API Key"
      },
      {
        "command": "claudeThrone.storeAnthropicKey",
        "title": "Thronekeeper: Store Anthropic API Key"
      },
      {
        "command": "claudeThrone.startProxy",
        "title": "Thronekeeper: Start Proxy"
      },
      {
        "command": "claudeThrone.stopProxy",
        "title": "Thronekeeper: Stop Proxy"
      },
      {
        "command": "claudeThrone.status",
        "title": "Thronekeeper: Show Status"
      },
      {
        "command": "claudeThrone.applyToClaudeCode",
        "title": "Thronekeeper: Apply Base URL to Claude Code"
      },
      {
        "command": "claudeThrone.revertApply",
        "title": "Thronekeeper: Revert to Claude Defaults"
      },
      {
        "command": "claudeThrone.checkConfigHealth",
        "title": "Thronekeeper: Check Configuration Health"
      }
    ],
    "configuration": {
      "title": "Thronekeeper",
      "properties": {
        "claudeThrone.proxy.port": {
          "type": "number",
          "default": 3000,
          "minimum": 1,
          "maximum": 65535,
          "markdownDescription": "Port for the bundled proxy server."
        },
        "claudeThrone.proxy.debug": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable debug logging for the proxy server."
        },
        "claudeThrone.proxy.skipHealthCheck": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Skip health check during proxy startup for instant initialization. Enable if experiencing startup delays."
        },
        "claudeThrone.proxy.startupTimeoutMs": {
          "type": "number",
          "default": 3000,
          "minimum": 1000,
          "maximum": 30000,
          "markdownDescription": "Timeout in milliseconds for waiting for proxy to start listening on port. Default: 3000ms (3 seconds)."
        },
        "claudeThrone.proxy.healthTimeoutMs": {
          "type": "number",
          "default": 500,
          "minimum": 100,
          "maximum": 5000,
          "markdownDescription": "Timeout in milliseconds for individual health check requests. Default: 500ms."
        },
        "claudeThrone.autoApply": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "## Auto-Apply Settings\n\nControl how Thronekeeper applies configuration to Claude Code when the proxy starts.\n\nWhen enabled, the extension writes the proxy URL and model configuration to `.claude/settings.json`."
        },
        "claudeThrone.applyToExtensions": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Apply proxy configuration to other known Claude/Anthropic extension settings (e.g., `anthropic.baseUrl`, `claude.baseUrl`). Most users should leave this disabled to avoid polluting VS Code settings. Only enable if you use other Claude extensions that require the base URL to be set in extension settings."
        },
        "claudeThrone.applyToTerminal": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Apply ANTHROPIC_BASE_URL to VS Code integrated terminal environment variables (for CLI usage with `claude` or `claude-code` commands). Not needed for the Claude Code extension. Only enable if you use Anthropic's CLI tools in VS Code's integrated terminal."
        },
        "claudeThrone.applyScope": {
          "type": "string",
          "default": "workspace",
          "enum": [
            "workspace",
            "global"
          ],
          "markdownDescription": "Scope at which to apply settings changes (workspace or global)."
        },
        "claudeThrone.customEndpointKind": {
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "openai",
            "anthropic"
          ],
          "markdownDescription": "## Advanced Settings\n\nDetection/override for custom endpoint type. 'openai' uses the proxy. 'anthropic' offers bypass to apply the URL directly to Claude Code."
        },
        "claudeThrone.twoModelMode": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "## Model Configuration\n\nEnable three-model mode to use separate models for reasoning, coding, and value tasks.\n\n**Note:** Model selection is now managed through the Thronekeeper panel (View → Thronekeeper)."
        },
        "claudeThrone.reasoningModel": {
          "type": "string",
          "default": "",
          "scope": "window",
          "markdownDescription": "The reasoning model for complex problem-solving tasks (maps to Opus tier in Claude Code)."
        },
        "claudeThrone.completionModel": {
          "type": "string",
          "default": "",
          "scope": "window",
          "markdownDescription": "The coding model for balanced development tasks (maps to Sonnet tier in Claude Code)."
        },
        "claudeThrone.valueModel": {
          "type": "string",
          "default": "",
          "scope": "window",
          "markdownDescription": "The value/efficiency model to use (typically Haiku-tier for fast, cost-effective operations)."
        },
        "claudeThrone.savedCombos": {
          "type": "array",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "reasoning": {
                "type": "string"
              },
              "completion": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          },
          "scope": "window",
          "markdownDescription": "## Saved Configurations\n\nManage your saved model combos and custom providers through the Thronekeeper panel.\n\nThese are automatically saved when you use the 'Save Model Combo' feature."
        },
        "claudeThrone.customProviders": {
          "type": "array",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "baseUrl": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "baseUrl",
              "id"
            ]
          },
          "scope": "window",
          "markdownDescription": "Saved custom provider configurations. Each provider can have its own name, base URL, and API key. Manage these through the Thronekeeper panel."
        },
        "claudeThrone.provider": {
          "type": "string",
          "default": "openrouter",
          "enum": [
            "openrouter",
            "openai",
            "together",
            "deepseek",
            "glm",
            "custom"
          ],
          "scope": "window",
          "markdownDescription": "## Provider Configuration\n\nSelect your AI provider from the dropdown. Saved custom providers will appear here automatically.\n\n**Note:** Provider selection and API keys are now managed through the Thronekeeper panel (View → Thronekeeper)."
        },
        "claudeThrone.selectedCustomProviderId": {
          "type": "string",
          "default": "",
          "scope": "window",
          "markdownDescription": "Selected custom provider ID when provider is set to 'custom'."
        },
        "claudeThrone.customBaseUrl": {
          "type": "string",
          "default": "",
          "scope": "window",
          "markdownDescription": "Custom endpoint URL for custom provider (OpenAI-compatible API)."
        },
        "claudeThrone.anthropicDefaults": {
          "type": "object",
          "default": {},
          "properties": {
            "opus": {
              "type": "string"
            },
            "sonnet": {
              "type": "string"
            },
            "haiku": {
              "type": "string"
            }
          },
          "scope": "application",
          "markdownDescription": "## Advanced Settings\n\nCached Anthropic default models (internal use). Updated when you store an Anthropic API key."
        },
        "claudeThrone.anthropicDefaultsTimestamp": {
          "type": "number",
          "default": 0,
          "scope": "application",
          "markdownDescription": "Timestamp when Anthropic defaults were last refreshed (internal use)."
        },
        "claudeThrone.modelSelectionsByProvider": {
          "type": "object",
          "default": {},
          "scope": "window",
          "markdownDescription": "Provider-specific model selections (internal use). Maps provider IDs to selected reasoning, completion, and value models."
        },
        "claudeThrone.customEndpointOverrides": {
          "type": "object",
          "default": {},
          "markdownDescription": "Manual endpoint type overrides per URL (internal use)."
        },
        "claudeThrone.claudeCode.apiTimeoutMs": {
          "type": "number",
          "default": 3000000,
          "markdownDescription": "## Claude Code Environment Variables\n\nAPI timeout in milliseconds for Claude Code requests. Default: 3000000 (50 minutes)."
        },
        "claudeThrone.claudeCode.disableNonessentialTraffic": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable non-essential traffic in Claude Code. When enabled, sets CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC=1 in `.claude/settings.json`."
        }
      }
    }
  },
  "scripts": {
    "bundle:proxy": "node ./scripts/bundle-proxy.mjs",
    "vscode:prepublish": "npm run bundle:proxy && npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "package": "vsce package",
    "test": "vitest run",
    "test:integration": "vitest run --config vitest.integration.config.ts"
  },
  "dependencies": {
    "undici": "^6.22.0",
    "zod": "^4.1.12"
  },
  "devDependencies": {
    "@types/node": "^20.12.7",
    "@types/vscode": "^1.85.0",
    "@vscode/test-electron": "^2.3.8",
    "esbuild": "^0.21.5",
    "typescript": "^5.9.3",
    "vitest": "^1.4.0",
    "vsce": "^2.15.0"
  }
}
