{"id":"claude-throne-1","title":"Implement VS Code Panel UI - Replace test HTML with production interface","description":"Complete replacement of test HTML in PanelViewProvider.ts with production UI including provider selection, API key management, model selection, and proxy controls using The Hive branding theme.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-15T15:29:11.890233-07:00","updated_at":"2025-10-15T15:58:07.034854-07:00","closed_at":"2025-10-15T15:58:07.034854-07:00"}
{"id":"claude-throne-10","title":"Add Beads artifacts and export for guarded changes","description":"Initialize Beads if not present (bd init --prefix coding-agent), create/claim tasks for this guardrails and Phase 6 work, record dependencies, close items, and export with bd export -o .beads/issues.jsonl. Commit the export file and reference the Bead ID in PR description and Constitution updates.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-29T17:43:12.306046-07:00","updated_at":"2025-10-29T17:43:30.407988-07:00","closed_at":"2025-10-29T17:43:30.407988-07:00","labels":["artifacts","guardrails","phase6"]}
{"id":"claude-throne-11","title":"Add Beads artifacts and export for guarded changes","description":"Initialize Beads if not present (bd init --prefix coding-agent), create/claim tasks for this guardrails and Phase 6 work, record dependencies, close items, and export with bd export -o .beads/issues.jsonl. Commit the export file and reference the Bead ID in PR description and Constitution updates.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-29T17:47:31.555914-07:00","updated_at":"2025-10-29T17:47:45.785517-07:00","closed_at":"2025-10-29T17:47:45.785517-07:00","labels":["artifacts","guardrails","phase6"]}
{"id":"claude-throne-12","title":"Standardize proxy errors to structured error objects","description":"Replace all proxyError string payloads with structured objects containing provider, error, errorType fields. Include errorType mapping for specific error categories (config, startup, port-in-use, permission, timeout, stale-models).","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-30T13:46:39.019305-07:00","updated_at":"2025-10-30T13:47:49.459986-07:00","closed_at":"2025-10-30T13:47:49.459986-07:00","labels":["area:proxy","constitution","invariant"]}
{"id":"claude-throne-13","title":"Add regression CI workflow with VS Code integration tests","description":"Create .github/workflows/regression.yml with label-check job requiring area:* labels. Add VS Code integration tests covering start/stop hydration, settings reflection, and provider switches using @vscode/test-electron.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-30T13:46:45.546021-07:00","updated_at":"2025-10-30T13:58:15.335221-07:00","closed_at":"2025-10-30T13:58:15.335221-07:00","labels":["area:ci","area:config","constitution","critical-path"],"dependencies":[{"issue_id":"claude-throne-13","depends_on_id":"claude-throne-12","type":"blocks","created_at":"2025-10-30T13:46:45.548182-07:00","created_by":"daemon"}]}
{"id":"claude-throne-14","title":"Remediate Constitution compliance: guarded-area edits, schema validation, tests","description":"Implement 9 remediation comments: Constitution compliance, schema validation, provider map invariants, health endpoint unification, auth header enforcement, endpoint-kind overrides, required tests, SSE error handling, Beads alignment","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-30T16:43:09.674134-07:00","updated_at":"2025-10-30T16:47:44.566969-07:00","closed_at":"2025-10-30T16:47:44.566969-07:00"}
{"id":"claude-throne-15","title":"Implement auth header negative tests, schema contract tests, CI wiring, and CUSTOM_ENDPOINT_OVERRIDES docs","description":"Add negative tests for auth header contract, wire schema contract tests into CI, document CUSTOM_ENDPOINT_OVERRIDES, bump extension version","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T17:00:59.00468-07:00","updated_at":"2025-10-30T17:00:59.00468-07:00"}
{"id":"claude-throne-2","title":"Add multi-provider public model browser with free/paid filtering","description":"Implemented comprehensive model browser that works with all providers (OpenRouter, OpenAI, Together, Grok, Anthropic) without requiring API keys. Features include: public API endpoints for OpenRouter/Together, static catalogs for others, free vs paid models toggle, search and sort functionality, enhanced model cards with pricing/context info, and seamless fallback to authenticated API when needed. Packaged as claude-throne-0.1.26.vsix with 32 files (280.76KB)","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-15T16:21:22.554513-07:00","updated_at":"2025-10-24T20:21:34.489433-07:00","closed_at":"2025-10-24T20:21:34.489433-07:00"}
{"id":"claude-throne-3","title":"Implement XML-based tool calling for universal model compatibility","description":"Replace native tool calling with XML-based approach to support all OpenRouter models including free ones and GPT-5-codex. Based on Kilo-Code's implementation that embeds tool definitions in system prompts and parses XML responses.","notes":"Successfully implemented XML-based tool calling for universal model compatibility. Created xml-tool-formatter.js for generating XML tool instructions and xml-tool-parser.js for parsing XML responses. Updated index.js to use XML approach instead of native tool calling. Fixed all tests including XML parser tests (17/17 passing) and updated streaming tool calls test to work with XML format. Added grok provider support to key-resolver.js. All 25 tests now passing. Packaged new VSIX (claude-throne-1.4.3.vsix, 635.03KB) with XML tool calling functionality included. XML approach supports problematic models like deepseek/deepseek-chat:free, qwen/qwen-2.5-coder-32b:free, and GPT-5-codex that previously failed with native tool calling.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T17:48:18.309906-07:00","updated_at":"2025-10-17T16:38:08.771537-07:00","closed_at":"2025-10-17T16:09:33.317782-07:00"}
{"id":"claude-throne-4","title":"Debugging Claude Throne proxy connectivity issue","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T14:59:59.788156-07:00","updated_at":"2025-10-23T15:01:20.028082-07:00","closed_at":"2025-10-23T15:01:20.028082-07:00"}
{"id":"claude-throne-5","title":"Fix onProviderChange to save old provider's models before state change","description":"Ensure onProviderChange saves the old provider's models before state change and clears only that provider's cache. Update extensions/claude-throne/webview/main.js and add tests to tests/phase4-hydration.test.js","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-29T17:04:09.758731-07:00","updated_at":"2025-10-29T17:43:29.518227-07:00","closed_at":"2025-10-29T17:43:29.518227-07:00","labels":["guardrails","phase6","provider-selection"]}
{"id":"claude-throne-6","title":"Add structured error telemetry with provider and token context","description":"In PanelViewProvider.ts, send error posts conforming to ErrorMessageSchema with fields {provider, error, errorType, token}. In webview/main.js, maintain a small in-memory buffer of the last N error entries keyed by provider/token and display it behind debug toggle. Add tests.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-29T17:38:07.704922-07:00","updated_at":"2025-10-29T17:43:29.681639-07:00","closed_at":"2025-10-29T17:43:29.681639-07:00","labels":["error-handling","guardrails","phase6"]}
{"id":"claude-throne-7","title":"Optimize model list filtering to skip DOM work when filtered ids unchanged","description":"In webview/main.js, maintain state.lastFilteredIds for model list. Before renderModelList, compute new filtered ids, sort, and compare to state.lastFilteredIds. If identical, return without DOM updates; otherwise update state.lastFilteredIds and re-render. Add performance test.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-29T17:39:20.897397-07:00","updated_at":"2025-10-29T17:43:29.77762-07:00","closed_at":"2025-10-29T17:43:29.77762-07:00","labels":["guardrails","performance","phase6"]}
{"id":"claude-throne-8","title":"Wire feature flags end-to-end (schema, extension, webview)","description":"Read claudeThrone.featureFlags in PanelViewProvider.ts when posting config and include flags in payload. In webview/main.js, set state.featureFlags from config and gate token checks (enableTokenValidation) and hydration logs/guards (enablePreApplyHydration). Add tests that toggle flags and verify behavior changes.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-29T17:42:07.523551-07:00","updated_at":"2025-10-29T17:43:30.038883-07:00","closed_at":"2025-10-29T17:43:30.038883-07:00","labels":["feature-flags","guardrails","phase6"]}
{"id":"claude-throne-9","title":"Add extension integration tests and CI workflow","description":"Create extensions/claude-throne/tests/integration.test.ts using @vscode/test-electron to cover start/stop hydration and settings.json reflection. Add .github/workflows/regression.yml to run root tests and extension tests, and a label-check job to ensure area:* labels on PRs touching guarded files. Update package.json with test script.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-29T17:42:54.459158-07:00","updated_at":"2025-10-29T17:43:30.236626-07:00","closed_at":"2025-10-29T17:43:30.236626-07:00","labels":["guardrails","phase6","testing"]}
